# Enter the name of your program here.
#  Your main .c file must also use this name. Don't use spaces.
TRG = main

# Enter the name of the folder that contains the XiphosLibrary files.
#  . means same folder, .. means parent folder, otherwise give a subfolder name like XiphosLibrary or a relative path like ../XiphosLibrary
LIB = ../XiphosLibrary

# This list must contain the XiphosLibrary source files that your program needs. Feel free to remove files you don't need.
PBL = $(LIB)/utility.c $(LIB)/display.c $(LIB)/servos.c $(LIB)/motors.c $(LIB)/adc.c $(LIB)/I2C.c $(LIB)/rtc.c $(LIB)/serial.c
PBL += nav.c movement.c
# Specify the port name for your In-System Programmer (ISP) device or cable here.
#  For a FTDI USB-to-UART converter on Windows this is something like COM2 (check in the Windows Device Manager under Ports for the number) 
#    In XP: Right-click My Computer, click "Properties" then navigate to the "Hardware" tab followed by clicking "Device Manager".
#    Scroll down to "Ports" and click the "+" to the left of the name. Finally read the "COM" number next to the name "USB Serial Port (COMx)".
#  For a FTDI USB-to-UART converter on Linux this is something like /dev/ttyUSB0 (for a listing of USB serial ports, run: ls /dev/ttyUSB* ).
#  For a cheap SparkFun AVR-PG1B serial programmer on Windows this is typically COM1.
#    You can check using steps similar to above, but looking at the entry named "Communications Port (COMx)".
#  For a cheap SparkFun AVR-PG1B serial programmer on Linux this is something like /dev/ttyS0
#  For a fancy Atmel AVRISP mkII In-System Programmer simply enter usb (lowercase is important).
#    On Windows, you may need to install the LibUSB drivers included with WinAVR at: <WinAVR folder>\utils\libusb\bin\avrisp2.inf
#  For a cheapo PonyProg or Futurlec style parallel port programmer enter lpt1 (lowercase is important).
PORT = COM10
#PORT = /dev/ttyUSB0
# Specify the type of In-System Programmer (ISP) device or cable you are using.
#  For a standard FTDI USB-to-UART converter on-board the Xiphos use butterfly -b 57600
#  For a cheap SparkFun AVR-PG1B serial programmer use ponyser
#  For a fancy Atmel AVRISP mkII In-System Programmer use avrispmkII
#  For a cheapo PonyProg or Futurlec style parallel port programmer use pony-stk200
#  Avrdude supports many more types of programmers. For a complete list of valid options, open a commandline and run: avrdude -c ?
#  You can see the hardware pinouts used for the various programmers and even define your own programmer in avrdude's config file at:
#    <WinAVR folder>\bin\avrdude.conf
ISP = butterfly -b 57600

# Enter the target microcontroller model.
#  For Xiphos, this should always be atmega1281 unless you substituted a different microcontroller chip model.
#  For a complete list of models supported by avrdude, run: avrdude -p ?
MCU = atmega1281


# Makefile Targets

# Since the "all" target is the first target in the file, it will run when you simply type make (or make all).
#  We have configured this target so that it only compiles the program into .elf and .hex files, and displays their final sizes.
all:
	avr-gcc -mmcu=$(MCU) -I . -Os -mcall-prologues -o $(TRG).elf $(TRG).c $(PBL) -lm
	avr-objcopy -O ihex $(TRG).elf $(TRG).hex
	avr-size $(TRG).elf

# This target first executes the "all" target to compile your code, and then programs the hex file into the Xiphos. Board using avrdude.
program: all
	avrdude -p $(MCU) -P $(PORT) -c $(ISP) -u -U flash:w:$(TRG).hex

# This target can be called to delete any existing compiled files (binaries), so you know that your next compile is fresh.
# The dash in front of rm is not passed to the shell, and just tells make to keep running if an error code is returned by rm.
clean:
	-rm $(TRG).elf $(TRG).hex
